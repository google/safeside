language: cpp
dist: xenial
env:
  global:
    - BUILD32ARGS='-DCMAKE_CXX_FLAGS=-m32 -DCMAKE_C_FLAGS=-m32'
    - BUILD64ARGS='-DCMAKE_CXX_FLAGS=-m64 -DCMAKE_C_FLAGS=-m64'
matrix:
  include:
    - name: "clang (Linux)"
      os: linux
      compiler: clang
    - name: "gcc (Linux)"
      os: linux
      compiler: gcc
    - name: "clang (macOS)"
      os: osx
      compiler: clang
    - name: "MSVC (Windows)"
      os: windows
      # CMake picks up MSVC regardless of what compiler we specify here.
      env:
        - BUILD32ARGS='-A Win32'
        - BUILD64ARGS='-A x64'
install:
  - if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      # Add Linux headers needed to build kernel module.
      sudo apt-get install -y "linux-headers-$(uname -r)";

      sudo apt-get install -y gcc-multilib;
    fi
script:
  # It would be a bit nicer to use `cmake -B build .`, but `-B` isn't
  # supported on older CMake.
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build64
  - cd build64
  - cmake .. ${BUILD64ARGS}
  # Invoke build in platform+generator agnostic way
  - cmake --build .

  # 32-bit build
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build32
  - cd build32
  - cmake .. ${BUILD32ARGS}
  - cmake --build .
